@using FUNewsManagementSystem.Controllers
@model NewsIndexViewModel
@{
    ViewData["Title"] = "Tin tức";
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
     <style>
        :root {
            --primary-color: #3b82f6;
            --primary-hover: #2563eb;
            --secondary-color: #f3f4f6;
            --text-primary: #1f2937;
            --text-secondary: #4b5563;
            --text-light: #9ca3af;
            --border-color: #e5e7eb;
            --card-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --hover-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            --transition-normal: all 0.3s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Montserrat', 'Segoe UI', sans-serif;
            background-color: #f9fafb;
            color: var(--text-primary);
            line-height: 1.6;
        }

        .container {
            max-width: 1400px;
            margin: 2rem auto;
            padding: 0 1.5rem;
            display: flex;
            gap: 2.5rem;
        }

        /* Left Sidebar Styles */
        .sidebar {
            width: 300px;
            flex-shrink: 0;
        }

        .filter-panel {
            background: white;
            border-radius: 16px;
            padding: 1.8rem;
            box-shadow: var(--card-shadow);
            position: sticky;
            top: 1.5rem;
            border: 1px solid var(--border-color);
        }

        .filter-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.8rem;
        }

        .filter-header h3 {
            font-size: 1.25rem;
            color: var(--text-primary);
            font-weight: 600;
            letter-spacing: -0.025em;
        }

        .filter-reset {
            background: none;
            border: none;
            color: var(--primary-color);
            cursor: pointer;
            font-size: 0.9rem;
            padding: 0.4rem 0.8rem;
            border-radius: 6px;
            font-weight: 500;
            transition: var(--transition-normal);
        }

        .filter-reset:hover {
            background-color: rgba(59, 130, 246, 0.1);
        }

        .filter-group {
            margin-bottom: 1.8rem;
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 1.8rem;
        }

        .filter-group:last-child {
            border-bottom: none;
            margin-bottom: 0;
            padding-bottom: 0;
        }

        .filter-group h4 {
            font-size: 1.05rem;
            color: var(--text-primary);
            margin-bottom: 1.2rem;
            font-weight: 600;
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: pointer;
            transition: var(--transition-normal);
        }

        .filter-group h4:hover {
            color: var(--primary-color);
        }

        .filter-group h4 i {
            transition: transform 0.3s ease;
            font-size: 0.85rem;
            color: var(--text-light);
        }

        .filter-group h4.collapsed i {
            transform: rotate(-90deg);
        }

        .filter-content {
            max-height: 400px;
            overflow-y: auto;
            scrollbar-width: thin;
            scrollbar-color: var(--text-light) transparent;
        }

        .filter-content::-webkit-scrollbar {
            width: 5px;
        }

        .filter-content::-webkit-scrollbar-track {
            background: transparent;
        }

        .filter-content::-webkit-scrollbar-thumb {
            background-color: var(--text-light);
            border-radius: 20px;
        }

        /* Category Hierarchy Styles */
        .category-list {
            list-style-type: none;
            padding: 0;
            margin: 0;
        }

        .category-item {
            margin-bottom: 0.75rem;
        }

        .category-parent {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.95rem;
            color: var(--text-primary);
            padding: 0.4rem 0.6rem;
            font-weight: 500;
            border-radius: 6px;
            transition: var(--transition-normal);
        }

        .category-parent:hover {
            background-color: rgba(59, 130, 246, 0.05);
        }

        .category-parent .filter-checkbox {
            flex: 1;
        }

        .category-parent i {
            font-size: 0.8rem;
            transition: transform 0.3s ease;
            color: var(--text-light);
        }

        .category-parent.expanded i {
            transform: rotate(90deg);
            color: var(--primary-color);
        }

        .subcategory-list {
            list-style-type: none;
            padding-left: 2rem;
            margin: 0.5rem 0 0.75rem;
            display: none;
        }

        .subcategory-list.show {
            display: block;
            animation: fadeIn 0.3s ease-in-out;
        }

        @@keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .subcategory-item {
            margin-bottom: 0.5rem;
        }

        .filter-checkbox {
            display: flex;
            align-items: center;
            gap: 0.8rem;
            cursor: pointer;
            padding: 0.4rem 0.6rem;
            border-radius: 6px;
            transition: var(--transition-normal);
        }

        .filter-checkbox:hover {
            background-color: rgba(59, 130, 246, 0.05);
        }

        .filter-checkbox label {
            font-size: 0.95rem;
            color: var(--text-secondary);
            cursor: pointer;
            user-select: none;
            display: flex;
            align-items: center;
            width: 100%;
            font-weight: 500;
        }

        .filter-checkbox input[type="checkbox"] {
            cursor: pointer;
            margin: 0;
            appearance: none;
            width: 18px;
            height: 18px;
            border: 2px solid var(--text-light);
            border-radius: 4px;
            position: relative;
            transition: var(--transition-normal);
        }

        .filter-checkbox input[type="checkbox"]:checked {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }

        .filter-checkbox input[type="checkbox"]:checked::after {
            content: '✓';
            position: absolute;
            color: white;
            font-size: 0.75rem;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        .filter-checkbox .count {
            margin-left: auto;
            font-size: 0.8rem;
            color: var(--text-light);
            background-color: var(--secondary-color);
            padding: 0.15rem 0.5rem;
            border-radius: 20px;
            font-weight: 500;
        }

        .date-filter input {
            width: 100%;
            padding: 0.75rem 1rem;
            border: 1px solid var(--border-color);
            border-radius: 10px;
            font-size: 0.95rem;
            margin-bottom: 0.75rem;
            outline: none;
            transition: var(--transition-normal);
            font-family: 'Montserrat', sans-serif;
        }

        .date-filter input:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.25);
        }

        .filter-search {
            margin-bottom: 1.2rem;
            position: relative;
        }

        .filter-search input {
            width: 100%;
            padding: 0.75rem 1rem 0.75rem 2.5rem;
            border: 1px solid var(--border-color);
            border-radius: 10px;
            font-size: 0.95rem;
            outline: none;
            transition: var(--transition-normal);
            font-family: 'Montserrat', sans-serif;
        }

        .filter-search input:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.25);
        }

        .filter-search i {
            position: absolute;
            left: 0.9rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-light);
            font-size: 0.9rem;
        }

        /* Main Content Styles */
        .main-content {
            flex: 1;
        }

        .header {
            text-align: left;
            margin-bottom: 2.5rem;
            position: relative;
        }

        .header h1 {
            font-size: 2.5rem;
            color: var(--text-primary);
            font-weight: 700;
            margin-bottom: 0.5rem;
            letter-spacing: -0.025em;
            position: relative;
            display: inline-block;
        }

        .header h1::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 0;
            width: 80px;
            height: 4px;
            background-color: var(--primary-color);
            border-radius: 2px;
        }

        .search-sort-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            flex-wrap: wrap;
            gap: 1.2rem;
        }

        .search-container {
            flex: 1;
            min-width: 280px;
            position: relative;
        }

        .search-input {
            width: 100%;
            padding: 0.95rem 1rem 0.95rem 3rem;
            border: 1px solid var(--border-color);
            border-radius: 12px;
            font-size: 1rem;
            outline: none;
            transition: var(--transition-normal);
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
            font-family: 'Montserrat', sans-serif;
        }

        .search-input:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.25);
        }

        .search-icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-light);
            font-size: 1.1rem;
        }

        .sort-container {
            display: flex;
            gap: 0.8rem;
            align-items: center;
        }

        .sort-label {
            font-size: 1rem;
            color: var(--text-primary);
            font-weight: 500;
        }

        .sort-select {
            padding: 0.85rem 1.2rem;
            border: 1px solid var(--border-color);
            border-radius: 12px;
            font-size: 0.95rem;
            outline: none;
            background-color: white;
            cursor: pointer;
            transition: var(--transition-normal);
            font-family: 'Montserrat', sans-serif;
            font-weight: 500;
            color: var(--text-primary);
            min-width: 160px;
            appearance: none;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%234b5563' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M6 9l6 6 6-6'/%3E%3C/svg%3E");
            background-repeat: no-repeat;
            background-position: right 1rem center;
            padding-right: 2.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
        }

        .sort-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.25);
        }

        /* Active Filter Tags */
        .filter-tags {
            display: flex;
            flex-wrap: wrap;
            gap: 0.75rem;
            margin-bottom: 2rem;
        }

        .filter-tag {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            background-color: rgba(59, 130, 246, 0.1);
            padding: 0.6rem 1rem;
            border-radius: 30px;
            font-size: 0.9rem;
            color: var(--primary-color);
            font-weight: 500;
            transition: var(--transition-normal);
            border: 1px solid rgba(59, 130, 246, 0.2);
        }

        .filter-tag:hover {
            background-color: rgba(59, 130, 246, 0.15);
        }

        .filter-tag button {
            background: none;
            border: none;
            color: var(--primary-color);
            cursor: pointer;
            font-size: 1rem;
            padding: 0;
            display: flex;
            align-items: center;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            transition: var(--transition-normal);
            justify-content: center;
        }

        .filter-tag button:hover {
            background-color: rgba(59, 130, 246, 0.2);
        }

        /* News Grid Styles */
        .news-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
            gap: 2rem;
        }

        .news-card {
            background: white;
            border-radius: 16px;
            overflow: hidden;
            box-shadow: var(--card-shadow);
            transition: var(--transition-normal);
            border: 1px solid var(--border-color);
            height: 100%;
            display: flex;
            flex-direction: column;
        }

        .news-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--hover-shadow);
            border-color: rgba(59, 130, 246, 0.3);
        }

        .news-image {
            width: 100%;
            height: 200px;
            overflow: hidden;
            position: relative;
        }

        .news-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.5s ease;
        }

        .news-card:hover .news-image img {
            transform: scale(1.05);
        }

        .news-content {
            padding: 1.8rem;
            display: flex;
            flex-direction: column;
            flex-grow: 1;
        }

        .news-title {
            font-size: 1.25rem;
            color: var(--text-primary);
            margin: 0 0 0.8rem;
            line-height: 1.4;
            font-weight: 700;
            letter-spacing: -0.01em;
            transition: var(--transition-normal);
        }

        .news-card:hover .news-title {
            color: var(--primary-color);
        }

        .news-headline {
            font-size: 0.95rem;
            color: var(--text-secondary);
            margin: 0 0 1.2rem;
            line-height: 1.6;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
            text-overflow: ellipsis;
            flex-grow: 1;
        }

        .news-meta {
            display: flex;
            justify-content: space-between;
            font-size: 0.85rem;
            color: var(--text-light);
            margin-top: 1.2rem;
            margin-bottom: 1.2rem;
            padding-top: 1.2rem;
            border-top: 1px solid var(--border-color);
        }

        .news-meta span {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .read-more {
            display: inline-block;
            padding: 0.75rem 1.5rem;
            background-color: var(--primary-color);
            color: white;
            text-decoration: none;
            border-radius: 30px;
            font-size: 0.95rem;
            font-weight: 600;
            transition: var(--transition-normal);
            text-align: center;
            border: none;
            cursor: pointer;
            margin-top: auto;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .read-more:hover {
            background-color: var(--primary-hover);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
            transform: translateY(-2px);
        }

        .no-results {
            grid-column: 1 / -1;
            text-align: center;
            padding: 4rem 2rem;
            background: white;
            border-radius: 16px;
            font-size: 1.2rem;
            color: var(--text-secondary);
            border: 1px solid var(--border-color);
            box-shadow: var(--card-shadow);
        }

        .no-results i {
            font-size: 3rem;
            color: var(--text-light);
            margin-bottom: 1.5rem;
            display: block;
        }

        .news-category {
            display: inline-block;
            background-color: rgba(59, 130, 246, 0.1);
            padding: 0.5rem 0.8rem;
            border-radius: 30px;
            font-size: 0.8rem;
            color: var(--primary-color);
            margin-bottom: 1rem;
            font-weight: 600;
            border: 1px solid rgba(59, 130, 246, 0.2);
        }

        .news-tags {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .news-tag {
            background-color: var(--secondary-color);
            padding: 0.4rem 0.7rem;
            border-radius: 20px;
            font-size: 0.75rem;
            color: var(--text-secondary);
            font-weight: 500;
            transition: var(--transition-normal);
        }

        .news-tag:hover {
            background-color: rgba(75, 85, 99, 0.2);
            color: var(--text-primary);
        }

        /* Pagination Styles */
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 0.5rem;
            margin-top: 3rem;
            padding: 1.5rem 0;
        }

        .pagination-btn {
            padding: 0.7rem 1rem;
            border: 1px solid var(--border-color);
            border-radius: 10px;
            background-color: white;
            color: var(--text-primary);
            cursor: pointer;
            transition: var(--transition-normal);
            text-decoration: none;
            font-weight: 500;
            min-width: 40px;
            text-align: center;
        }

        .pagination-btn:hover:not(.disabled) {
            background-color: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
            transform: translateY(-2px);
        }

        .pagination-btn.active {
            background-color: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
            cursor: default;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .pagination-btn.disabled {
            color: var(--text-light);
            cursor: not-allowed;
            background-color: var(--secondary-color);
            opacity: 0.7;
        }

        /* Responsive Styles */
        @@media (max-width: 1100px) {
            .container {
                flex-direction: column;
            }

            .sidebar {
                width: 100%;
            }

            .filter-panel {
                position: static;
            }

            .news-grid {
                grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            }
        }

        @@media (max-width: 768px) {
            .news-grid {
                grid-template-columns: 1fr;
            }

            .search-sort-container {
                flex-direction: column;
                align-items: stretch;
            }

            .header h1 {
                font-size: 2rem;
            }
        }
        }
    </style>
</head>
<body>
    <div class="container">
        <aside class="sidebar">
            <div class="filter-panel">
                <div class="filter-header">
                    <h3>Bộ lọc</h3>
                    <button class="filter-reset" id="resetAllFilters">Đặt lại tất cả</button>
                </div>

                <!-- Category Filter with Hierarchy -->
                <div class="filter-group">
                    <h4 data-toggle="category-content">
                        Danh mục
                        <i class="fas fa-chevron-down"></i>
                    </h4>
                    <div class="filter-content" id="category-content">
                        <div class="filter-search">
                            <i class="fas fa-search"></i>
                            <input type="text" id="categorySearch" placeholder="Tìm danh mục...">
                        </div>
                        <ul class="category-list">
                            @foreach (var parentCat in Model.Categories.Where(c => c.ParentCategory == null).Select(c => c.CategoryName).Distinct())
                            {
                                <li class="category-item">
                                    <div class="category-parent" data-category="@parentCat.ToLower()">
                                        <div class="filter-checkbox">
                                            <input type="checkbox"
                                                   id="parentcat_@parentCat.ToLower().Replace(" ", "_")"
                                                   data-filter="parentCategory"
                                                   value="@parentCat">
                                            <label for="parentcat_@parentCat.ToLower().Replace(" ", "_")">
                                                @parentCat
                                            </label>
                                        </div>
                                        <i class="fas fa-chevron-right"></i>
                                    </div>
                                    <ul class="subcategory-list" data-parent="@parentCat.ToLower()">
                                        @foreach (var subCat in Model.Categories.Where(c => c.ParentCategory?.CategoryName == parentCat))
                                        {
                                            <li class="subcategory-item">
                                                <div class="filter-checkbox">
                                                    <input type="checkbox"
                                                           id="cat_@subCat.CategoryName.ToLower().Replace(" ", "_")"
                                                           data-filter="category"
                                                           value="@subCat.CategoryName">
                                                    <label for="cat_@subCat.CategoryName.ToLower().Replace(" ", "_")">
                                                        @subCat.CategoryName
                                                    </label>
                                                </div>
                                            </li>
                                        }
                                    </ul>
                                </li>
                            }
                        </ul>
                    </div>
                </div>

                <div class="filter-group">
                    <h4 data-toggle="date-content">
                        Ngày đăng
                        <i class="fas fa-chevron-down"></i>
                    </h4>
                    <div class="filter-content" id="date-content">
                        <div class="date-filter">
                            <input type="date" id="startDate" placeholder="Từ ngày">
                            <input type="date" id="endDate" placeholder="Đến ngày">
                        </div>
                    </div>
                </div>

                <div class="filter-group">
                    <h4 data-toggle="tags-content">
                        Thẻ
                        <i class="fas fa-chevron-down"></i>
                    </h4>
                    <div class="filter-content" id="tags-content">
                        <div class="filter-search">
                            <i class="fas fa-search"></i>
                            <input type="text" id="tagSearch" placeholder="Tìm thẻ...">
                        </div>
                        @foreach (var tag in Model.Tags)
                        {
                            <div class="filter-checkbox">
                                <input type="checkbox"
                                       id="tag_@tag.?TagName.ToLower().Replace(" ", "_")"
                                       data-filter="tag"
                                       value="@tag.TagName">
                                <label for="tag_@tag.?TagName.ToLower().Replace(" ", "_")">
                                    @tag.TagName
                                </label>
                            </div>
                        }
                    </div>
                </div>

                <div class="filter-group">
                    <h4 data-toggle="author-content">
                        Tác giả
                        <i class="fas fa-chevron-down"></i>
                    </h4>
                    <div class="filter-content" id="author-content">
                        <div class="filter-search">
                            <i class="fas fa-search"></i>
                            <input type="text" id="authorSearch" placeholder="Tìm tác giả...">
                        </div>
                        @foreach (var author in Model.Authors)
                        {
                            <div class="filter-checkbox">
                                <input type="checkbox"
                                       id="author_@author.?AccountName.ToLower().Replace(" ", "_")"
                                       data-filter="author"
                                       value="@author.AccountName">
                                <label for="author_@author.?AccountName.ToLower().Replace(" ", "_")">
                                    @author.AccountName
                                    <span class="count">@Model.NewsArticles.Count(n => n.CreatedBy == author)</span>
                                </label>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </aside>

        <main class="main-content">
            <div class="header">
                <h1>Tin tức mới nhất</h1>
            </div>

            <div class="search-sort-container">
                <div class="search-container">
                    <i class="fas fa-search search-icon"></i>
                    <input type="text" id="searchInput" class="search-input" placeholder="Tìm kiếm tin tức...">
                </div>
                <div class="sort-container">
                    <span class="sort-label">Sắp xếp theo:</span>
                    <select id="sortSelect" class="sort-select">
                        <option value="newest">Mới nhất</option>
                        <option value="oldest">Cũ nhất</option>
                        <option value="titleAsc">Tiêu đề (A-Z)</option>
                        <option value="titleDesc">Tiêu đề (Z-A)</option>
                    </select>
                </div>
            </div>

            <div class="filter-tags" id="activeFilters"></div>

            <div class="news-grid" id="newsGrid">
                @foreach (var item in Model.NewsArticles)
                {
                    <div class="news-card"
                         data-title="@item.NewsTitle?.ToLower()"
                         data-date="@(item.CreatedDate?.ToString("yyyyMMdd") ?? "0")"
                         data-created-by="@item.CreatedBy?.AccountName"
                         data-category="@item.Category?.CategoryName"
                         data-parent-category="@(item.Category?.ParentCategory?.CategoryName ?? item.Category?.CategoryName)"
                         data-tags="@(item.Tags != null ? string.Join(",", item.Tags.Select(t => t.TagName)) : "")">
                        <div class="news-image">
                            <img style="width: 100%;height: 100%;" src="https://th.bing.com/th/id/OIP.leQLmjT3_29TcyW5dkj2mQHaE8?rs=1&pid=ImgDetMain" />
                        </div>
                        <div class="news-content">
                            @if (item.Category != null)
                            {
                                <div class="news-category">@(item.Category.ParentCategory != null ? item.Category.ParentCategory.CategoryName + " > " : "" ) @item.Category.CategoryName</div>
                            }
                            <h2 class="news-title">@item.NewsTitle</h2>
                            <p class="news-headline">@item.Headline</p>
                            <div class="news-meta">
                                <span><i class="fas fa-calendar-alt"></i> @item.CreatedDate?.ToString("dd/MM/yyyy")</span>
                                <span><i class="fas fa-user"></i> @item.CreatedBy?.AccountName</span>
                            </div>
                            @if (item.Tags != null && item.Tags.Any())
                            {
                                <div class="news-tags">
                                    @foreach (var tag in item.Tags)
                                    {
                                        <span class="news-tag">#@tag.TagName</span>
                                    }
                                </div>
                            }
                            <a href="@Url.Action("Details", "News", new { id = item.NewsArticleId })" class="read-more">Đọc thêm</a>
                        </div>
                    </div>
                }
            </div>
            <div class="pagination" id="pagination"></div>
        </main>
    </div>
    </body>
</html>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const searchInput = document.getElementById('searchInput');
        const sortSelect = document.getElementById('sortSelect');
        const newsGrid = document.getElementById('newsGrid');
        const newsCards = document.querySelectorAll('.news-card');
        const activeFilters = document.getElementById('activeFilters');
        const resetAllFilters = document.getElementById('resetAllFilters');
        const startDate = document.getElementById('startDate');
        const endDate = document.getElementById('endDate');

        const categorySearch = document.getElementById('categorySearch');
        const tagSearch = document.getElementById('tagSearch');
        const authorSearch = document.getElementById('authorSearch');

        const ITEMS_PER_PAGE = 4; // Số bài viết mỗi trang
        let currentPage = 1;
        function createPagination(totalItems) {
            const pagination = document.getElementById('pagination');
            const pageCount = Math.ceil(totalItems / ITEMS_PER_PAGE);

            pagination.innerHTML = '';

            if (pageCount <= 1) return;

            const prevBtn = document.createElement('button');
            prevBtn.className = 'pagination-btn';
            prevBtn.textContent = '«';
            prevBtn.disabled = currentPage === 1;
            prevBtn.classList.toggle('disabled', currentPage === 1);
            prevBtn.addEventListener('click', () => {
                if (currentPage > 1) {
                    currentPage--;
                    updateNewsDisplay();
                }
            });
            pagination.appendChild(prevBtn);

            for (let i = 1; i <= pageCount; i++) {
                const pageBtn = document.createElement('button');
                pageBtn.className = 'pagination-btn';
                pageBtn.textContent = i;
                pageBtn.classList.toggle('active', i === currentPage);
                pageBtn.addEventListener('click', () => {
                    currentPage = i;
                    updateNewsDisplay();
                });
                pagination.appendChild(pageBtn);
            }

            const nextBtn = document.createElement('button');
            nextBtn.className = 'pagination-btn';
            nextBtn.textContent = '»';
            nextBtn.disabled = currentPage === pageCount;
            nextBtn.classList.toggle('disabled', currentPage === pageCount);
            nextBtn.addEventListener('click', () => {
                if (currentPage < pageCount) {
                    currentPage++;
                    updateNewsDisplay();
                }
            });
            pagination.appendChild(nextBtn);
        }
        function updateNewsDisplay() {
            const visibleCards = Array.from(newsCards).filter(card => {
                const title = card.dataset.title || '';
                const date = card.dataset.date || '0';
                const author = card.dataset.createdBy || '';
                const category = card.dataset.category || '';
                const parentCategory = card.dataset.parentCategory || '';
                const tags = (card.dataset.tags || '').toLowerCase().split(',').filter(tag => tag.trim() !== '');

                let show = true;
                const searchTerm = searchInput.value.toLowerCase();

                if (searchTerm && !title.includes(searchTerm)) show = false;
                if (filters.category.length && !filters.category.includes(category)) show = false;
                if (filters.parentCategory.length && !filters.parentCategory.includes(parentCategory)) show = false;
                if (filters.tag.length && !filters.tag.some(filterTag => tags.includes(filterTag.toLowerCase()))) show = false;
                if (filters.author.length && !filters.author.includes(author)) show = false;
                if (filters.startDate && date < filters.startDate.replace(/-/g, '')) show = false;
                if (filters.endDate && date > filters.endDate.replace(/-/g, '')) show = false;

                return show;
            });

            const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
            const endIndex = startIndex + ITEMS_PER_PAGE;

            newsCards.forEach(card => {
                const isVisible = visibleCards.includes(card);
                const visibleIndex = visibleCards.indexOf(card);
                if (isVisible) {
                    card.style.display = (visibleIndex >= startIndex && visibleIndex < endIndex) ? 'block' : 'none';
                } else {
                    card.style.display = 'none';
                }
            });

            createPagination(visibleCards.length);

            if (visibleCards.length === 0) {
                newsGrid.innerHTML = '<div class="no-results">Không tìm thấy kết quả phù hợp</div>';
                Array.from(newsCards).forEach(card => newsGrid.appendChild(card));
            } else {
                const noResultsMessage = newsGrid.querySelector('.no-results');
                if (noResultsMessage) noResultsMessage.remove();
            }

            window.scrollTo({ top: newsGrid.offsetTop - 100, behavior: 'smooth' });
        }

        const filters = {
            category: [],
            parentCategory: [],
            tag: [],
            author: [],
            startDate: null,
            endDate: null
        };

        document.querySelectorAll('.category-parent i').forEach(arrow => {
            arrow.addEventListener('click', function(e) {
                e.stopPropagation();
                const parentDiv = this.parentElement;
                const categoryKey = parentDiv.dataset.category;
                const subCategoryList = document.querySelector(`.subcategory-list[data-parent="${categoryKey}"]`);
                parentDiv.classList.toggle('expanded');
                subCategoryList.classList.toggle('show');
            });
        });

        document.querySelectorAll('[data-toggle]').forEach(header => {
            header.addEventListener('click', function () {
                const targetId = this.dataset.toggle;
                const targetContent = document.getElementById(targetId);
                this.classList.toggle('collapsed');
                targetContent.style.display = targetContent.style.display === 'none' ? 'block' : 'none';
            });
        });

        function setupFilterSearch(searchInput, items) {
            searchInput.addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase();
                items.forEach(item => {
                    const text = item.textContent.toLowerCase();
                    item.style.display = text.includes(searchTerm) ? 'flex' : 'none';
                });
            });
        }

        setupFilterSearch(categorySearch, document.querySelectorAll('.category-item'));
        setupFilterSearch(tagSearch, document.querySelectorAll('#tags-content .filter-checkbox'));
        setupFilterSearch(authorSearch, document.querySelectorAll('#author-content .filter-checkbox'));

        function addActiveFilterTag(type, value) {
            const tag = document.createElement('div');
            tag.className = 'filter-tag';
            tag.innerHTML = `
                ${type}: ${value}
                <button data-type="${type.toLowerCase()}" data-value="${value}">&times;</button>
            `;
            activeFilters.appendChild(tag);
        }

        function updateActiveFilters() {
            activeFilters.innerHTML = '';
            filters.parentCategory.forEach(category => addActiveFilterTag('Danh mục', category));
            filters.category.forEach(category => addActiveFilterTag('Loại', category));
            filters.tag.forEach(tag => addActiveFilterTag('Thẻ', tag));
            filters.author.forEach(author => addActiveFilterTag('Tác giả', author));
            if (filters.startDate) addActiveFilterTag('Từ ngày', filters.startDate);
            if (filters.endDate) addActiveFilterTag('Đến ngày', filters.endDate);
        }

        document.querySelectorAll('.filter-checkbox label').forEach(label => {
            label.addEventListener('click', function(e) {
                e.stopPropagation();
            });
        });

        document.querySelectorAll('.filter-checkbox input').forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                const filterType = this.dataset.filter;
                const value = this.value;

                if (this.checked) {
                    filters[filterType].push(value);
                } else {
                    filters[filterType] = filters[filterType].filter(item => item !== value);
                }
                updateActiveFilters();
                applyFilters();
            });
        });

        [startDate, endDate].forEach(input => {
            input.addEventListener('change', function() {
                filters[this.id] = this.value;
                updateActiveFilters();
                applyFilters();
            });
        });

        activeFilters.addEventListener('click', function(e) {
            if (e.target.tagName === 'BUTTON') {
                const type = e.target.dataset.type;
                const value = e.target.dataset.value;

                if (type === 'từ ngày') filters.startDate = null;
                else if (type === 'đến ngày') filters.endDate = null;
                else filters[type] = filters[type].filter(item => item !== value);

                document.querySelector(`input[data-filter="${type}"][value="${value}"]`)?.removeAttribute('checked');
                if (type === 'từ ngày') startDate.value = '';
                if (type === 'đến ngày') endDate.value = '';

                updateActiveFilters();
                applyFilters();
            }
        });

        resetAllFilters.addEventListener('click', function() {
            Object.keys(filters).forEach(key => {
                if (Array.isArray(filters[key])) filters[key] = [];
                else filters[key] = null;
            });
            document.querySelectorAll('.filter-checkbox input').forEach(cb => cb.checked = false);
            startDate.value = '';
            endDate.value = '';
            searchInput.value = '';
            sortSelect.value = 'newest';
            updateActiveFilters();
            applyFilters();
        });

        function applyFilters() {
            const searchTerm = searchInput.value.toLowerCase();

            newsCards.forEach(card => {
                const title = card.dataset.title || '';
                const date = card.dataset.date || '0';
                const author = card.dataset.createdBy || '';
                const category = card.dataset.category || '';
                const parentCategory = card.dataset.parentCategory || '';
                const tags = (card.dataset.tags || '').toLowerCase().split(',').filter(tag => tag.trim() !== '');

                let show = true;

                if (searchTerm && !title.includes(searchTerm)) show = false;
                if (filters.category.length && !filters.category.includes(category)) show = false;
                if (filters.parentCategory.length && !filters.parentCategory.includes(parentCategory)) show = false;
                if (filters.tag.length && !filters.tag.some(filterTag => tags.includes(filterTag.toLowerCase()))) show = false;
                if (filters.author.length && !filters.author.includes(author)) show = false;
                if (filters.startDate && date < filters.startDate.replace(/-/g, '')) show = false;
                if (filters.endDate && date > filters.endDate.replace(/-/g, '')) show = false;

                card.style.display = show ? 'block' : 'none';
            });

            const visibleCards = Array.from(newsCards).filter(card => card.style.display !== 'none');
            if (visibleCards.length === 0) {
                newsGrid.innerHTML = '<div class="no-results">Không tìm thấy kết quả phù hợp</div>';
                Array.from(newsCards).forEach(card => newsGrid.appendChild(card));
            } else {
                const noResultsMessage = newsGrid.querySelector('.no-results');
                if (noResultsMessage) noResultsMessage.remove();
            }

            currentPage = 1;
            updateNewsDisplay();
        }

        function sortNewsCards() {
            const cardsArray = Array.from(newsCards);
            const sortValue = sortSelect.value;

            cardsArray.sort((a, b) => {
                if (sortValue === 'newest') return b.dataset.date - a.dataset.date;
                if (sortValue === 'oldest') return a.dataset.date - b.dataset.date;
                if (sortValue === 'titleAsc') return a.dataset.title.localeCompare(b.dataset.title);
                if (sortValue === 'titleDesc') return b.dataset.title.localeCompare(a.dataset.title);
            });

            newsGrid.innerHTML = '';
            cardsArray.forEach(card => newsGrid.appendChild(card));
            currentPage = 1;
            updateNewsDisplay();
        }

        function initializePage() {
            newsCards.forEach(card => card.style.display = 'block');
            sortNewsCards();
            applyFilters(); 
        }

        initializePage();

        searchInput.addEventListener('input', applyFilters);
        sortSelect.addEventListener('change', () => {
            sortNewsCards();
            applyFilters();
        });

        resetAllFilters.addEventListener('click', function() {
            Object.keys(filters).forEach(key => {
                if (Array.isArray(filters[key])) filters[key] = [];
                else filters[key] = null;
            });
            document.querySelectorAll('.filter-checkbox input').forEach(cb => cb.checked = false);
            startDate.value = '';
            endDate.value = '';
            searchInput.value = '';
            sortSelect.value = 'newest';
            updateActiveFilters();
            applyFilters();
        });
    });
</script>